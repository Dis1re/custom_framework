// Typescript
// рассмотрим расширение js - typescript или типизированный js.
// typescript - этор расширение над языком js, которое вводит типизацию
// файлы написанные на нём имеют расширение *.ts
// расширение файла реакта компонента имеет расширение *.tsx 
// чтобы создать реактовое приложение для typescript: npx create-react-app projectName --template typescript
// приложение написанное на ts также поддерживает файлы js
// не имеет смысла переписывать на ts полифилы, то есть написанные на старом стандарте новая функция языка
// главная особенность в том, что используемым переменным нужно задавать тип, также тип может быть определён значением.
// основыне типы данных, которые используются чаще всего: 
// -number
// -string
// -boolean
// -undefined
// -null
// -any (автоматический тип данных)
// -never (очень не полезный тип данных)
// -void (тип данных для функций, которая ничего не возвращает)

// также есть много других типов данных, но их старались стандартизировать, например: HTMLElement, HTMLDivElement и тд
// задавание массива: 
// number[] - тип данных элементов массива и квадртные скобки.
// для констант и переменных тип пишется через двоеточие после объявление переменной:
var b: number;  
var a = 7;
var c: number = 78;

// самописные типы данных
// в ts можно задавать свои типы и структуры данных:
let m: 'distance' | 'lumen' | undefined; // m может принимать только три значения.

// самописные тип данных:
type typeName /= 'name'|'soname';  // Алексей Сергеевич предлагает в начале названия типа писать T для явного обозначения
              /= number[][][];
              /= {
                x: number,
                y: number,
                z?: number
              };
            //и тд
// в самописных типах данных могут быть обязательные и не обязательные свойства
// например знаком ? после название переменной можно обозначит необязательность свойства.

// использование ts в фукнциях
function f1(a: number, b: string = ''): void {
  //  
}
const f2 = (/**/): ()=>number => {/* */}

f1: (a: number: b: string)=>void//тип данных для функций

// наследование типов:
type TLight = TPoint & {lumen:number};
//у типа данных можно удалить свойство с помощью слова Omit
type TPoint2D = Omit<Tpoint, 'z'>;

// перечисление:
enum Esex{
    male='male',
    female='female'
}
let sex: Esex = Esex.male;

// интерфейсы:
//это объект
interface IMorda {
    a: number,
    b: string,
    c?: boolean
};

// интерфейсы могут наследоваться друг от друга с переопределением свойствю
// особенность интерфейсов в том, что их можно имплементровать в классы
// имплементация интерфейсов в класс делает обязательно написание свойств интерфейса

interface ICalculator{
    add(a:number, b: number)=>number,
    //...
}

class Calculator implеments ICalculator{/*...*/}

// generic:
// generic - это передаваемый тип данных, который может быть использован в структуре данных или функции
function sum<T>(a: T, b: T):T {
    return a+b;
}
sum<number>(2, 5);
sum<string>('Вася', 'Маша');

// App.tsx
export enum EPages{
    Calc,
    Graph2D,
    Grpah3D
};

const App: React.FC = () => {
    const [pageName, setPageName] = useState<EPages>(EPages.Calc);
    // ... 
}

// Header.tsx
type THeader = {
    setPageName: (name: EPages) => void;
};

const Header: React.FC<THeader> = ({setPageName}) => {/*...*/}; 

дезешечка:
-переписать проект на typescript, кроме Graph3D и Calculator. // рекомендуются переписать весь проект на зачёт в typescript
